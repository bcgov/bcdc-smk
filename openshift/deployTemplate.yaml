apiVersion: v1
kind: Template
metadata:
  name: BCDC_SMK_TEMPLATE
labels:
  app: bcdc-smk
parameters:
  - name: NAME
    description: "base name for the all objects"
    value: bcdcsmk
  - name: ENV
    description: "this is dev|test|prd"
    value: dev
  - name: "CONTAINER_SRC"
    description: "path to the container/image stream"
    value: docker.pkg.github.com/bcgov/bcdc-smk/bcdc-smk
  - name: "CONTAINER_SRC_SECRET_NAME"
    description: "name of the secret that is used to retrieve the container, require by github hosted packages (images)"
    value: bcdc-smk-image-access-secret
  - name: "DEPLOY_NAMESPACE"
    description: "The namespace / project where the template is to be deployed"
    value: dbc-kirk-tools
  - name: "IMAGE_LABEL"
    description: "the label that identifies what image to deploy"
    value: "latest"


objects:
  - kind: "DeploymentConfig"
    apiVersion: "v1"
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftNewApp
      generation: 4
      labels:
        app: ${NAME}-${ENV}-app
      name: ${NAME}-${ENV}-dc
      namespace: ${DEPLOY_NAMESPACE}
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        app: ${NAME}-${ENV}-app
        deploymentconfig: ${NAME}-${ENV}-dc
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        
        type: Rolling
      template:
        metadata:
          annotations:
            openshift.io/generated-by: OpenShiftNewApp
          creationTimestamp: null
          labels:
            app: ${NAME}-${ENV}-app
            deploymentconfig: ${NAME}-${ENV}-dc
        spec:
          containers:
            - image: "${CONTAINER_SRC}:${IMAGE_LABEL}"
              imagePullPolicy: IfNotPresent
              name: ${NAME}-${ENV}-app
              ports:
                - containerPort: 8080
                  protocol: TCP
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          imagePullSecrets:
            - name: ${CONTAINER_SRC_SECRET_NAME}
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          terminationGracePeriodSeconds: 30
      test: false
      triggers:
        - type: ConfigChange

  - kind: "Service"
    apiVersion: "v1"
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftNewApp
      labels:
        app: ${NAME}-${ENV}-app
      name: ${NAME}-${ENV}-svc
      namespace: ${DEPLOY_NAMESPACE}
    spec:
      ports:
        - name: 8080-tcp
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        app: ${NAME}-${ENV}-app
        deploymentconfig: ${NAME}-${ENV}-dc
      sessionAffinity: None
    
  - kind: Route
    apiVersion: v1
    metadata:
      labels:
        app: ${NAME}-${ENV}-rt
      name: ${NAME}-${ENV}-rt
      namespace: ${DEPLOY_NAMESPACE}
    spec:
      port:
        targetPort: 8080-tcp
      tls:
        termination: edge
      to:
        kind: Service
        name: ${NAME}-${ENV}-svc
        weight: 100
      wildcardPolicy: None
